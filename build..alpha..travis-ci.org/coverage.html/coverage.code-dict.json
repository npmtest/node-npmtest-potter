{"/home/travis/build/npmtest/node-npmtest-potter/test.js":"/* istanbul instrument in package npmtest_potter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-potter/lib.npmtest_potter.js":"/* istanbul instrument in package npmtest_potter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_potter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_potter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-potter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-potter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_potter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_potter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_potter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_potter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_potter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_potter.__dirname + '/lib.npmtest_potter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/cli.js":"#!/usr/bin/env node\n// such stack trace. so long.\nrequire('stackup');\n\nmain.callAsCli = callAsCli;\nmodule.exports = main;\n\nvar path = require('path');\nvar process = require('process');\nvar parseArgs = require('minimist');\nvar chalk = require('chalk');\nvar extend = require('xtend/immutable');\n\nvar defaultPrint = require('./lib/default-print.js');\n// var verifyVersion = require('./lib/verify-version.js');\nvar mergeCommands = require('./lib/mergeCmds.js');\nvar getCommand = require('./lib/commands/get.js');\nvar runCommand = require('./lib/commands/run.js');\n\nvar pluginsDir = path.join(process.env.HOME,'.potter', 'node_modules');\nvar priorityCmds = ['plugin'];\n\nif (require.main === module) {\n    callAsCli();\n}\n\nfunction callAsCli() {\n    var argv = parseArgs(process.argv.slice(2), {\n        boolean: ['expert', 'dry', 'damp']\n    });\n    argv.potterVersion = require('../package.json').version;\n\n    //merge builtsin first\n    argv._commands = mergeCommands(__dirname, ['lib', 'cli-deprecated.js']);\n    main(argv);\n}\n\nfunction main(opts) {\n    var extra = opts._.slice();\n\n    // command is --command or first arg\n    var command = opts.command || opts._.shift() || null;\n    var baseCommands = opts._commands;\n    baseCommands.aliases = {\n        version: 'version',\n        v: 'version',\n        h: 'help',\n        help: 'help',\n        __noArguments__: 'help'\n    };\n    opts.cmd = 'potter ' + command;\n\n    //run priority commands first\n    if (priorityCmds.indexOf(command) !== -1) {\n        if (callCommand()) return;\n    }\n\n    //run all other commands with plugins to ensure enumeration\n    opts._commands = mergeCommands(pluginsDir, ['.bin'], opts._commands);\n    if (callCommand()) return;\n\n    // new line for pretty.\n    console.log('');\n\n    console.error(chalk.red('ERR:'),\n        'command',\n        chalk.red(opts.cmd +\n            (opts.enum ? ' --enum=' + opts.enum : '')),\n        'not found');\n\n    process.exit(1);\n\n    function callCommand() {\n        var fn = getCommand(baseCommands, command, {\n            expert: opts.expert,\n            argv: extend(opts, {\n                _: extra\n            })\n        });\n\n        if (fn) {\n            var handled = runCommand(fn, [opts, defaultPrint(command)], {\n                argv: opts\n            });\n            return handled;\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/default-print.js":"module.exports = defaultPrint;\n\nfunction defaultPrint(name) {\n    return function printCallback(err, result) {\n        if (err) {\n            console.log(name + ' failed to complete');\n            console.error(err.message);\n            return process.exit(1);\n        }\n\n        console.log(name + ' finished');\n        if (result) console.log(result);\n        process.exit(0);\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/mergeCmds.js":"var fs = require('fs');\nvar path = require('path');\nvar merge = require('./commands/merge.js');\n\nfunction mergeCommands(dir, ignore, oldCmds) {\n    var recipes;\n    //make sure dir exists\n    if(fs.existsSync(dir)) {\n        recipes = fs.readdirSync(dir)\n            .filter(function removeLib(fileName) {\n                return ignore.indexOf(fileName) === -1;\n            })\n            .map(function toFullPath(fileName) {\n                return path.join(dir, fileName);\n            });\n    }\n\n    var commands;\n\n    if (recipes) {\n        commands = recipes.reduce(function reduceRecipes(prev, curr) {\n            return merge(prev, require(curr));\n        }, {});\n    } else {\n        commands = {};\n    }\n\n    if(oldCmds) commands = merge(oldCmds, commands);\n\n    return commands;\n}\n\nmodule.exports = mergeCommands;\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/commands/merge.js":"var TypedError = require('error/typed');\n\nvar Command = require('./command.js');\n\nvar DuplicateKey = TypedError({\n    type: 'mergeCommands.duplicate.key',\n    message: 'You have installed commands from {module}.\\n' +\n        'These was a conflict in {name}.{key}.\\n' +\n        '{name}.{key} is already defined by {other}.\\n' +\n        'To fix please either uninstall {module} or resolve ' +\n            'the conflict.\\n'\n});\n\n/*  merges two command objects together.\n\n    This allows you to create the set of sub commands for\n        your application from multiple sets of commands\n\n*/\n\nmodule.exports = mergeCommands;\n\nfunction mergeCommands(base, cmds) {\n    var command = Command(base);\n    cmds = cmds || {};\n\n    // For each type make any direct function assignments into objects\n    // Then merge them in and error if they conflict\n    ['commands', 'workflows', 'scaffolds'].forEach(function(type) {\n        if (cmds[type]) {\n            Object.keys(cmds[type]).forEach(function(key) {\n                if (cmds[type][key] instanceof Function) {\n                    var fn = cmds[type][key];\n                    if (type === 'scaffolds') {\n                        cmds[type][key] = {command: fn, expert: true}; //default expert to true for gen\n                    } else {\n                        cmds[type][key] = {command: fn, expert: false};\n                    }\n                }\n            });\n            command[type] = safeExtend(command[type],\n                cmds[type], error('commands'));\n        }\n    });\n\n    // Merge in shared commands and error if their variant types conflict\n    if (cmds.sharedCommands) {\n        var sharedCommands = command.sharedCommands;\n        var keys = Object.keys(cmds.sharedCommands);\n        keys.forEach(function mergeShared (cmdName) {\n            var baseOptions = sharedCommands[cmdName] || {};\n            var cmdOptions = cmds.sharedCommands[cmdName];\n            Object.keys(cmdOptions).forEach(function(key) {\n                if (cmdOptions[key] instanceof Function) {\n                    var fn = cmdOptions[key];\n                    cmdOptions[key] = {command: fn, expert: false}; //default expert to false\n                }\n\n            });\n            sharedCommands[cmdName] = safeExtend(baseOptions,\n                cmdOptions, error('sharedCommands.' + cmdName));\n        });\n    }\n\n    command.__oldCommands[cmds.name] = cmds;\n\n    return command;\n\n    function error(name) {\n        return function createError(key) {\n            var other;\n            // find the other command that already defined\n            // {name}.{key} on the command object\n            var keys = Object.keys(command.__oldCommands);\n            keys.some(function findConflict(cmdName) {\n                var cmd = command.__oldCommands[cmdName];\n\n                if (cmd[name] && cmd[name][key]) {\n                    other = cmdName;\n                    return true;\n                }\n            });\n\n            return DuplicateKey({\n                module: cmds.name,\n                key: key,\n                name: name,\n                other: other\n            });\n        };\n    }\n\n}\n\nfunction safeExtend(left, right, createError) {\n    Object.keys(right).forEach(function tryOverwrite(key) {\n        if (key in left) {\n            throw createError(key);\n        }\n\n        left[key] = right[key];\n    });\n    return left;\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/commands/command.js":"module.exports = Command;\n\nfunction Command(opts) {\n    if (!(this instanceof Command)) {\n        return new Command(opts);\n    }\n\n    this.name = typeof (opts && opts.name) === 'string' ?\n        opts.name : '';\n    this.commands = (opts && opts.commands) || {};\n    this.scaffolds = (opts && opts.scaffolds) || {};\n    this.workflows = (opts && opts.workflows) || {};\n    this.sharedCommands = (opts && opts.sharedCommands) || {};\n    this.__oldCommands = (opts && opts.__oldCommands) || {};\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/commands/get.js":"/* given some commands object you can get a concrete\n    command or sub command.\n\n*/\nmodule.exports = getCommand;\n\nfunction getCommand(base, section, subsection, opts) {\n    if (!base) {\n        return null;\n    }\n\n    if (typeof subsection === 'object') {\n        opts = subsection;\n        subsection = null;\n    }\n\n    opts = opts || {};\n\n    var fn = getSection(base, section, opts);\n\n    /* something something subsection */\n\n    return fn;\n}\n\nfunction getSection(base, section, opts) {\n    if (base.commands[section]) {\n        return base.commands[section];\n    } else if (base.sharedCommands[section]) {\n        return base.sharedCommands[section];\n    } else if (section === 'gen') {\n        return base.scaffolds;\n    } else if (section === 'create') {\n        return base.workflows;\n    }\n\n    var argv = opts.argv || {};\n    var keys = Object.keys(base.aliases || {});\n    var fn;\n\n    keys.some(function findAlias(key) {\n        if (argv[key]) {\n            var section = base.aliases[key];\n            fn = getSection(base, section, opts);\n            return true;\n        }\n    });\n\n    if (fn) {\n        return fn;\n    }\n\n    if (argv._ && argv._.length === 0) {\n        return getSection(base,\n            base.aliases.__noArguments__, opts);\n    }\n\n    return null;\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/lib/commands/run.js":"var Wizzard = require('wizzard').Wizzard;\nvar chalk = require('chalk');\n\n/* runs a command.\n\n\n*/\nmodule.exports = runCommand;\n\nfunction runCommand(fn, args, opts) {\n    if (!fn) {\n        return false;\n    }\n\n    opts = opts || {};\n    var subCommand = opts.subCommand;\n\n    if (typeof fn === 'function') {\n        if (subCommand) {\n            if (!fn[subCommand]) {\n                return false;\n            }\n            fn = fn[subCommand];\n        }\n\n        fn.apply(null, args);\n        return true;\n    } else if (typeof fn.command === 'function') {\n        if (!fn.expert || opts.argv.expert) {\n            if(subCommand) {\n                if(!fn.command[subCommand]) {\n                    return false;\n                }\n                fn.command = fn.command[subCommand];\n            }\n            fn.command.apply(null, args);\n            return true;\n        } else {\n            console.error(chalk.yellow('WARN:'),\n                'did you forget to use --expert ?');\n            return false;\n        }\n    }\n\n    var argv = opts.argv || {};\n    var fns = fn;\n    fn = null;\n\n    if (argv.enum) {\n        fn = fns[argv.enum];\n\n        if (!fn) {\n            return false;\n        }\n\n        if (opts.subCommand) {\n            if (!fn.command[opts.subCommand]) {\n                return false;\n            }\n\n            fn = fn.command[opts.subCommand];\n            fn.apply(null, args);\n            return true;\n        }\n\n        fn.command.apply(null, args);\n        return true;\n    }\n\n    var keys = Object.keys(fns);\n    if (opts.subCommand) {\n        keys = keys.filter(function hasSubCommand(key) {\n            return !!fns[key].command[subCommand];\n        });\n    }\n\n    if(!argv.expert) {\n        keys = keys.filter(function expert(key) {\n            return !fns[key].expert;\n        });\n    }\n    if (keys.length === 1) {\n        fn = fns[keys[0]];\n        if (opts.subCommand) {\n            fn = fn.command[opts.subCommand];\n        }\n\n        if (fn.command) {\n            fn = fn.command;\n        }\n\n        fn.apply(null, args);\n        return true;\n    }\n\n    if (keys.length === 0) {\n        console.error(chalk.yellow('WARN:'),\n            'No variants installed, did you forget to use --expert?');\n        return true;\n    }\n\n    keys.sort();\n\n    promptEnum('Which variant would you like? ', keys,\n        function onPrompt(err, cmdName) {\n            if (err) {\n                var cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    return cb(err);\n                } else {\n                    throw err;\n                }\n            }\n\n            args[0].enumCmd = cmdName;\n\n            var fn = fns[cmdName].command;\n\n            if (opts.subCommand) {\n                fn = fn[opts.subCommand];\n            }\n\n            fn.apply(null, args);\n        });\n    return true;\n}\n\nfunction promptEnum(msg, options, cb) {\n    var wiz = new Wizzard();\n\n    wiz.addInput(msg, options);\n\n    wiz.on('end', function onResult(results) {\n        var res = results[0];\n\n        cb(null, res);\n    });\n\n    wiz.run();\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/cli-deprecated.js":"#!/usr/bin/env node\nrequire('stackup');\n\nvar cli = require('./cli.js');\n\nvar chalk = require('chalk');\n\nconsole.log(chalk.red('WARNING') + ': ' + chalk.yellow('playdoh') + \n            ' is deprecated please use ' +\n            chalk.yellow('potter'));\n\ncli.callAsCli();\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/builtin/index.js":"module.exports = {\n    name: 'builtin',\n    commands: {\n        version: require('./version.js'),\n        help: require('./help/'),\n        plugin: require('./plugin.js')\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/builtin/version.js":"var package = require('../../package.json');\n\nmodule.exports = version;\n\nfunction version() {\n    console.log(package.version);\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/builtin/help/index.js":"var join = require('path').join;\n\nvar getCommand = require('../../lib/commands/get.js');\nvar runCommand = require('../../lib/commands/run.js');\nvar printHelp = require('./print-help.js');\n\nvar helpFiles = {\n    'default': printHelp.bind(null, join(__dirname, 'usage.md'))\n};\n\nfunction help(opts) {\n    var section = opts._[0] || 'default';\n    var fn = helpFiles[section];\n\n    opts.cmd = 'potter ' + section;\n    opts.help = true;\n\n    if (fn) {\n        return fn(opts);\n    }\n\n    if (!fn && opts._commands) {\n        fn = getCommand(opts._commands, section, {\n            argv: opts\n        });\n    }\n\n    var handled = runCommand(fn, [opts], {\n        argv: opts,\n        subCommand: 'help'\n    });\n\n    if (!handled) {\n        console.error('Could not find help file for ' + section);\n        process.exit(1);\n    }\n}\n\nmodule.exports = help;\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/builtin/help/print-help.js":"var fs = require('fs');\nvar msee = require('msee');\nvar process = require('process');\n\nmodule.exports = printHelp;\n\nfunction printHelp(opts, settings) {\n    settings = settings || {};\n    if (typeof opts === 'string') {\n        opts = { files: [opts] };\n    }\n\n    settings = settings || {};\n\n    var content = opts.files.map(function (fileName) {\n        return fs.readFileSync(fileName, 'utf8');\n    }).join('\\n');\n\n    var text = msee.parse(content, {\n        paragraphStart: '\\n'\n    }) + '\\n';\n\n    var lines = text.split('\\n').length;\n    var consoleLines = process.stdout.rows;\n\n    if (lines < consoleLines || !settings.pager || !process.stdout.isTTY) {\n        return console.log(text);\n    } else {\n\n      var pager = Pager({ pager: 'less' });\n\n      pager.write(text);\n      return pager.end();\n    }\n}\n\nvar spawn = require('child_process').spawn;\n\nfunction Pager(opts, cb) {\n    if (typeof opts === 'function') {\n        cb = opts;\n        opts = {};\n    }\n\n    if (!opts) {\n        opts = {};\n    }\n\n    var pager = opts.pager || process.env.PAGER || 'more';\n\n    setRaw(true);\n    var ps = spawn(pager, ['-R'], { customFds: [ null, 1, 2 ] });\n\n    ps.on('exit', function (code, sig) {\n        setRaw(false);\n        process.stdin.pause();\n        if (typeof cb === 'function') {\n            cb(code, sig);\n        }\n    });\n\n    return ps.stdin;\n}\n\nvar tty = require('tty');\nfunction setRaw(mode) {\n    return process.stdin.setRawMode ?\n        process.stdin.setRawMode(mode) : tty.setRawMode(mode);\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/cli/builtin/plugin.js":"var chalk = require('chalk');\nvar childProcess = require('child_process');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar parseArgs = require('minimist');\nvar path = require('path');\nvar semver = require('semver');\nvar series = require('run-series');\n//var tilde = require('tilde-expansion');\nvar Wizzard = require('wizzard').Wizzard;\n\n//var merge = require('../lib/commands/merge.js');\nvar printHelp = require('./help/print-help.js');\nvar mergeCommands = require('../lib/mergeCmds.js');\n\n//todo improve this with tilde\nvar potterHome = path.join(process.env.HOME, '.potter');\n\nvar commandMap = {\n    'install' : install,\n    'i': install,\n    'remove' : remove,\n    'rm': remove,\n    'list': list,\n    'ls': list,\n    'help': halp\n};\n\nif (require.main === module) {\n    plugin(parseArgs(process.argv.slice(2)), function(err) {\n          throw err;\n      });\n}\n\n\nfunction plugin(opts, cb) {\n    if(opts._.length === 0) {\n        halp();\n    } else if(Object.keys(commandMap).indexOf(opts._[0]) !== -1) {\n        var cmd = opts._[0];\n        opts._ = opts._.slice(1);\n        commandMap[cmd](opts, cb);\n    }\n}\n\nfunction install(opts, cb) {\n    var plugin = opts._[0];\n    if (!plugin) cb(new Error(chalk.red('You must provide a plugin to install')));\n    var version;\n    if(plugin.indexOf('@') && plugin.substr(0,7) !== 'git+ssh') {\n        //if only JS had tuples\n        version = plugin.split('@');\n        plugin = version[0];\n        version = (version.length > 1) ? version[1] : null;\n    }\n\n    if(plugin.substr(0,7) === 'git+ssh' && plugin.indexOf('#') !== -1) {\n        version = plugin.split('#');\n        plugin = version[0];\n        version = (version.length > 1) ? version[1] : null;\n    }\n\n    series([\n        //make sure the potter folder exists\n        function(cb) {\n            fs.exists(potterHome, function(exists) {\n                if(exists) {\n                    cb(null);\n                } else {\n                    mkdirp(potterHome, cb);\n                }\n            });\n        },\n        //make sure a package.json exists\n        function(cb) {\n            fs.exists(path.join(potterHome, 'package.json'), function(exists) {\n                if(exists) {\n                    cb(null);\n                } else {\n                    var packagejson = '{\"dependencies\":{}}';\n                    fs.writeFile(path.join(potterHome, 'package.json'), packagejson, cb);\n                }\n            });\n        },\n        function(cb) {\n\n            //install plugin into ~/.playdoh/node_modules\n            //update ~/.playdoh/package.json\n            //TODO error handling\n            var plugins = require(path.join(potterHome, 'package.json'));\n            var deps = plugins.dependencies;\n            var found = false;\n            //check to see if the plugin has already been installed\n            Object.keys(deps).forEach(function(key) {\n                var wizz = new Wizzard();\n                var upgradeString;\n                var depUri;\n                var depRef;\n                var sDepRef;\n                var sVersion;\n                var rollback;\n                //modules on npm\n                if (key === plugin) {\n                    found = true;\n                    // check if specified version is greater.\n                    if(version && semver.gtr(version, deps[key])) {\n                        //ask to upgrade if no version\n                        upgradeString = 'Do you want to upgrade from ' + deps[key] + ' to ' + version + '?';\n                    } else if (version && semver.ltr(version, deps[key])) {\n                        //ask to downgrade\n                        upgradeString = 'Do you want to downgrade from ' + deps[key] + ' to ' + version + '?';\n                    } else {\n                        // already installed upgrade?\n                        upgradeString = 'Do you want to upgrade from ' + deps[key] + ' to the latest version?';\n                    }\n                    wizz.addInput(upgradeString, ['y','n']);\n                    wizz.on('end', rhb(dealWithIt, null, {name:plugin, version:version, rollback:rollback}, cb));\n                    wizz.run();\n\n                } else if(deps[key] === plugin) {\n                    found = true;\n                    //match exact urls (e.g. git+ssh)\n                    console.log(chalk.yellow('This version of ' + key + ' is already installed'));\n                    process.exit();\n                } else if (deps[key].substr(0,7) === 'git+ssh') {\n                    depRef = deps[key].split('#');\n                    depUri = depRef[0];\n                    depRef = (depRef.length > 1) ? depRef[1] : null;\n\n\n                    //check if same plugin giturl\n                    if(depUri === plugin) {\n                        found = true;\n                        rollback = key;\n                        //now compare refs\n                        if((sDepRef = semver.valid(depRef)) && \n                           (sVersion = semver.valid(version))) {\n                            if(semver.lt(sDepRef, sVersion)) {\n                                //if current version is less than new version ask to upgrade\n                                upgradeString = 'Do you want to upgrade from ' + deps[key] + ' to ' + version + '?';\n\n                            } else if(semver.gt(sDepRef, sVersion)) {\n                                //if current version is higher than new version ask to downgrade\n                                upgradeString = 'Do you want to downgrade from ' + deps[key] + ' to ' + version + '?';\n\n                            } else {\n                                //if current version asked to upgrade\n                                upgradeString = 'Do you want to upgrade from ' + deps[key] + ' to the latest version?';\n                            }\n                            wizz.addInput(upgradeString, ['y','n']);\n                            wizz.on('end', rhb(dealWithIt, null, {name:plugin, version:version, rollback:rollback}, cb));\n                            wizz.run();\n                        } else {\n                            //at least one of the gitrefs isn't semver\n                            //so just ask to upgrade\n                            upgradeString = 'Do you want to upgrade from ' + deps[key] + ' to the latest version?';\n                            wizz.addInput(upgradeString, ['y','n']);\n                            wizz.on('end', rhb(dealWithIt, null, {name:plugin, version:version, rollback:rollback}, cb));\n                            wizz.run();\n                        }\n                    }\n                }\n            });\n\n            if(!found) {\n                installPlugin(plugin, version, null, cb);\n            }\n        }\n    ]);\n\n}\n\n\nfunction dealWithIt(input, pkg, cb) {\n    if(input[0] === 'y') {\n        installPlugin(pkg.name, pkg.version, pkg.rollback, cb);\n    } else {\n        cb(null);\n    }\n}\n\nfunction installPlugin(pkg, version, rollback, cb) {\n    var installable = pkg;\n    if(version) {\n        if(pkg.substr(0,7) === 'git+ssh') {\n            installable += '#' + version;\n        } else {\n            installable += '@' + version;\n        }\n    }\n    var cmd = 'i -S ' + installable;\n    console.log('Installing plugin...');\n    npm(cmd, potterHome, function validateInstall(err, stdout) {\n        //make sure install was success\n        //console.log(stderr);\n        // console.log(stdout);\n        if(err) {\n            console.log(chalk.red('NPM install failed!'));\n            console.log('Please read the ' + path.join(potterHome, '/npm-debug.log'));\n            process.exit();\n        }\n        console.log('Plugin installed');\n        var installed = stdout.match(/^([a-z][-a-z0-9]*)@(\\d+\\.\\d+.\\d+ )/m)[1];\n        try {\n            console.log('Checking for conflicts...');\n            var cmds = mergeCommands(path.join(__dirname,'../'), ['lib', 'cli-deprecated.js']);\n            mergeCommands(path.join(potterHome,'node_modules'), ['.bin'], cmds);\n        /*jshint -W002 */\n        } catch (err) {\n            console.log(chalk.red('Plugin had conflicts!'));\n            console.log('Rolling back...');\n            //rollback\n            if(rollback) {\n                return installPlugin(pkg, rollback, null, cb);\n            } else {\n                return remove({_:[installed]});\n            }\n        }\n\n        console.log(chalk.green('Installed Plugin!'));\n        process.exit();\n    });\n}\n\nfunction npm(cmd, cwd, cb) {\n    cmd = 'npm ' + cmd;\n    mkdirp(cwd, function onDir() {\n        childProcess.exec(cmd, {cwd:cwd}, cb);\n    });\n}\n\nfunction remove(opts, cb) {\n    var plugin = opts._[0];\n    if (!plugin) cb(new Error(chalk.red('You must provide a plugin to remove')));\n    console.log(chalk.red('Removing ' + plugin));\n\n    var cmd = 'rm -S ' + plugin;\n    npm(cmd, potterHome, function npmRm(err, stdout, stderr) {\n        if(err) throw err;\n\n        //console.log(stdout);\n        //console.log(stderr);\n\n        if(stderr && stderr.indexOf('npm WARN uninstall not installed') !== -1) {\n            return console.log('Plugin ' + plugin + ' was not installed');\n        }\n        console.log('Removed plugin ' + plugin);\n    });\n}\n\nfunction list() {\n    var cmd = 'ls | grep \"^[└├]\"';\n    npm(cmd, potterHome, function npmList(err, stdout) {\n        if(err) throw err;\n        //console.log(stderr);\n        var libs = stdout.split('\\n');\n        libs = libs.map(function(lib) {\n            return lib.substr(4);\n        }).filter(function(lib) {\n            return lib;\n        }).forEach(function(lib) {\n            var line = chalk.green(' * ') + lib;\n            console.log(line);\n        });\n    });\n}\n\nfunction rhb(fn, scope) {\n    //right hand bind\n    //call with function, this, arg1, arg2, etc\n    var args = Array.prototype.slice.call(arguments).slice(2);\n    return function() {\n        args = Array.prototype.slice.call(arguments).concat(args);\n        fn.apply(scope, args);\n    };\n}\n\nfunction halp() {\n    return printHelp(path.join(__dirname, 'usage-plugin.md'));\n}\n\nplugin.help = halp;\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/router.js":"// Feel free to replace routes-router with your routing library\n// of choice.\nvar Router = require('routes-router');\n\nmodule.exports = createRouter;\n\nfunction createRouter(config, clients) {\n    var router = Router();\n\n    router.addRoute('/', require('./routes/home.js'));\n    // Health check route is required in production.\n    router.addRoute('/health', require('./routes/health.js'));\n\n    return routeHandler;\n\n    function routeHandler(req, res) {\n        res.setHeader('X-Uber-App', 'unpm');\n        return router(req, res, {\n            config: config,\n            clients: clients\n        }/*, myOwnErrorHandlerCallback*/);\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/server.js":"#!/usr/bin/env node\nvar hostname = require('os').hostname;\nvar http = require('http');\nvar fetchConfig = require('playdoh-server/config');\nvar perf = require('playdoh-server/perf');\n\nvar createRouter = require('./router.js');\nvar createLogger = require('./clients/logger.js');\nvar createStatsd = require('./clients/statsd.js');\nvar createUncaught = require('./clients/uncaught.js');\n\nfunction createServer(config, clients) {\n    // boot your app here\n    var router = createRouter(config, clients);\n    var server = http.createServer(router);\n\n    //TODO replace me with decent logger\n    server.on('request', function onRequest(req) {\n        config.logger.info('got request', {\n            uri: req.url\n        });\n    });\n\n    server.perfServer = perf(config.get('perfSettings'));\n\n    return server;\n}\n\nmodule.exports = createServer;\n\nif (require.main === module) {\n    // settings the process title allows a process monitor to\n    // have a useful name for your process when monitoring it.\n    process.title = 'nodejs-rt-unpm-on-' + hostname();\n\n    var NODE_ENV = process.env.NODE_ENV;\n    var config = fetchConfig(__dirname, {\n        dc: NODE_ENV === 'production' ?\n            '/etc/uber/datacenter' : null\n    });\n    var clients = {};\n    clients.statsd = config.statsd = createStatsd(config);\n    var logger = clients.logger = config.logger =\n        createLogger(config, clients);\n    var onError = createUncaught(config, clients);\n\n    process.on('uncaughtException', onError);\n\n    // write up the server with configuration settings at the\n    // top level.\n    var server = createServer(config, clients);\n    server.listen(config.get('port'));\n    logger.info('listening on port', {\n        port: config.get('port')\n    });\n    server.perfServer.listen(config.get('controlPort'));\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/clients/logger.js":"var os = require('os');\nvar Logger = require('playdoh-server/logger');\n\nfunction createLogger(config, clients) {\n    return Logger({\n        meta: {\n            team: config.get('team'),\n            project: config.get('project'),\n            hostname: os.hostname(),\n            pid: process.pid\n        },\n        backends: Logger.defaultBackends(\n            config.get('playdoh-logger'), clients)\n    });\n}\n\nmodule.exports = createLogger;\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/clients/statsd.js":"var os = require('os');\nvar Statsd = require('playdoh-server/statsd');\n\nmodule.exports = createStatsd;\n\nfunction createStatsd(config) {\n    var opts = config.get('playdoh-statsd');\n\n    return opts ? Statsd({\n        host: opts.host,\n        port: opts.port,\n        scope: [\n            config.get('project'),\n            process.env.NODE_ENV,\n            os.hostname().split('.')[0]\n        ].join('.')\n    }) : null;\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/clients/uncaught.js":"var os = require('os');\nvar uncaught = require('playdoh-server/uncaught');\n\nmodule.exports = createUncaught;\n\nfunction createUncaught(config, clients) {\n    return uncaught({\n        logger: clients.logger,\n        prefix: [\n            config.get('project'),\n            process.env.NODE_ENV,\n            os.hostname().split('.')[0]\n        ].join('.') + ' ',\n        backupFile: config.get('playdoh-uncaught.backupFile')\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/dashboards/service.js":"var graph = require('graphite-dash-gen').mkGraph;\nvar t = require('graphite-dash-gen').mkTarget;\nvar Dashboard = require('graphite-dash-gen').Dashboard;\nvar Dash = require('graphite-dash-gen');\n\nfunction serviceDashboard(opts) {\n    var processName = opts.team + '-' + opts.project +\n        '-on-' + opts.serverName;\n\n    return new Dashboard(opts.team + '-' + opts.project, [\n        graph('Service CPU',[\n            t('servers.%s.nodejs.%s.cpu.user',\n                opts.serverName, processName)\n        ]),\n        Dash.weekComparisonGraph('Number of FDs', {\n            yMin: 0,\n            hideLegend: 'true'\n        }, [\n            t('servers.%s.nodejs.%s.num_fds',\n                opts.serverName, processName)\n        ])\n    ]);\n}\n\nvar dashboard = serviceDashboard({\n    team: 'web',\n    project: 'unpm',\n    serverName: 'app01-peak1'\n});\n\nmodule.exports = dashboard;\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/routes/health.js":"module.exports = health;\n\nfunction health(req, res) {\n    res.end('OK');\n}\n","/home/travis/build/npmtest/node-npmtest-potter/node_modules/potter/unpm/routes/home.js":"module.exports = home;\n\n/* - can use `opts.params`, `opts.splats`, `opts.clients` &\n        `opts.config`.\n   - always call the `cb` with `cb(null)` or `cb(err)`\n\n   Check out the following ideas for different approaches to routes:\n\n     - Realtime API repo ( https://code.uberinternal.com/diffusion/RTREAL/ )\n     - http-framework examples & docs ( https://github.com/Raynos/http-framework/ )\n     - bedrock & documentation ( https://people.uberinternal.com/~aleksey/bedrock/ )\n*/\nfunction home(req, res, opts, cb) {\n    var logger = opts.clients.logger;\n\n    logger.info('do application logging here');\n\n    res.end('hello from unpm');\n    cb(); // always call callback\n}\n"}